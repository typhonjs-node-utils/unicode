{"version":3,"file":"index.js","sources":["../src/unicode-trie/swap.ts","../src/unicode-trie/index.ts","../src/grapheme/split/typeTrieB64.ts","../src/grapheme/split/extPictB64.ts","../src/grapheme/types.ts","../src/grapheme/split/index.ts"],"sourcesContent":["const isBigEndian = (new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x12);\r\n\r\nconst swap = (b, n, m) => {\r\n   let i = b[n];\r\n   b[n] = b[m];\r\n   b[m] = i;\r\n};\r\n\r\nconst swap32 = array => {\r\n   const len = array.length;\r\n   for (let i = 0; i < len; i += 4) {\r\n      swap(array, i, i + 3);\r\n      swap(array, i + 1, i + 2);\r\n   }\r\n};\r\n\r\nexport const swap32LE = array => {\r\n   if (isBigEndian) {\r\n      swap32(array);\r\n   }\r\n};","import { decompressSync }  from '#runtime/data/compress';\r\nimport { swap32LE }        from './swap';\r\n\r\n// Shift size for getting the index-1 table offset.\r\nconst SHIFT_1 = 6 + 5;\r\n\r\n// Shift size for getting the index-2 table offset.\r\nconst SHIFT_2 = 5;\r\n\r\n// Difference between the two shift sizes,\r\n// for getting an index-1 offset from an index-2 offset. 6=11-5\r\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\r\n\r\n// Number of index-1 entries for the BMP. 32=0x20\r\n// This part of the index-1 table is omitted from the serialized form.\r\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\r\n\r\n// Number of entries in an index-2 block. 64=0x40\r\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\r\n\r\n// Mask for getting the lower bits for the in-index-2-block offset. */\r\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\r\n\r\n// Shift size for shifting left the index array values.\r\n// Increases possible data size with 16-bit index values at the cost\r\n// of compactability.\r\n// This requires data blocks to be aligned by DATA_GRANULARITY.\r\nconst INDEX_SHIFT = 2;\r\n\r\n// Number of entries in a data block. 32=0x20\r\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\r\n\r\n// Mask for getting the lower bits for the in-data-block offset.\r\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\r\n\r\n// The part of the index-2 table for U+D800..U+DBFF stores values for\r\n// lead surrogate code _units_ not code _points_.\r\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\r\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\r\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\r\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\r\n\r\n// Count the lengths of both BMP pieces. 2080=0x820\r\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\r\n\r\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\r\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\r\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\r\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8\r\n\r\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\r\n// Variable length, for code points up to highStart, where the last single-value range starts.\r\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\r\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\r\n//\r\n// The part of the index-2 table for supplementary code points starts\r\n// after this index-1 table.\r\n//\r\n// Both the index-1 table and the following part of the index-2 table\r\n// are omitted completely if there is only BMP data.\r\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\r\n\r\n// The alignment size of a data block. Also the granularity for compaction.\r\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\r\n\r\nexport class UnicodeTrie\r\n{\r\n   data;\r\n   errorValue;\r\n   highStart;\r\n\r\n   constructor(data)\r\n   {\r\n      const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');\r\n\r\n      if (isBuffer || data instanceof Uint8Array)\r\n      {\r\n         // read binary format\r\n         let uncompressedLength;\r\n         if (isBuffer)\r\n         {\r\n            this.highStart = data.readUInt32LE(0);\r\n            this.errorValue = data.readUInt32LE(4);\r\n            uncompressedLength = data.readUInt32LE(8);\r\n            data = data.slice(12);\r\n         }\r\n         else\r\n         {\r\n            const view = new DataView(data.buffer);\r\n            this.highStart = view.getUint32(0, true);\r\n            this.errorValue = view.getUint32(4, true);\r\n            uncompressedLength = view.getUint32(8, true);\r\n            data = data.subarray(12);\r\n         }\r\n\r\n         // double inflate the actual trie data\r\n         data = decompressSync(data);\r\n         data = decompressSync(data);\r\n\r\n         // swap bytes from little-endian\r\n         swap32LE(data);\r\n\r\n         this.data = new Uint32Array(data.buffer);\r\n\r\n      }\r\n      else\r\n      {\r\n         // pre-parsed data\r\n         ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\r\n      }\r\n   }\r\n\r\n   get(codePoint)\r\n   {\r\n      let index;\r\n      if ((codePoint < 0) || (codePoint > 0x10ffff))\r\n      {\r\n         return this.errorValue;\r\n      }\r\n\r\n      if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff)))\r\n      {\r\n         // Ordinary BMP code point, excluding leading surrogates.\r\n         // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\r\n         // data is stored in the index array itself.\r\n         index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\r\n         return this.data[index];\r\n      }\r\n\r\n      if (codePoint <= 0xffff)\r\n      {\r\n         // Lead Surrogate Code Point.  A Separate index section is stored for\r\n         // lead surrogate code units and code points.\r\n         //   The main index has the code unit data.\r\n         //   For this function, we need the code point data.\r\n         index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\r\n         return this.data[index];\r\n      }\r\n\r\n      if (codePoint < this.highStart) {\r\n         // Supplemental code point, use two-level lookup.\r\n         index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\r\n         index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\r\n         index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\r\n         return this.data[index];\r\n      }\r\n\r\n      return this.data[this.data.length - DATA_GRANULARITY];\r\n   }\r\n}\r\n","export const typeTrieB64 = \"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\";","export const extPictB64 = \"AAACAAAAAACAOAAAAbYBSf7t2S1IBEEYBuDVDZ7FYrQMNsFiu3hgEYOI0SCXRIUrB8JhEZtgs5gEg1GMFk02m82oGI02m+9xezCOczv/uwv3fvAwc/PzfXOzcdqzWdaBDdiGPdiHdjE+DS3RNDuCfsn8idQ/g3OH3BdwKf0e96/gumTfYcncLdzBPTzAo+RZ+f0Cr/AG7/AJX4738x1wtz9FO5PX/50n6UXMNdfg/0lERERERERERERERETpdedHBvDRql4nq0cXtW9af98qdRby0Vvp8K4W0V+C5Xw0t4J2bfjeBp3cnEu1brnnCTYNa7eKdz91XP7WO9Lb4GqRb7cY6xbtAdqeVOsY/QGcevw/tb6OT85YhvfKYEx9CMuxKsKnrs+eJtVInVvHJ0eVYVvTZk2siFVLOCjb61PTZX3MdVWEyP7fjzpmMxdzTyq2Ebue6x61nXRGnzndWpf1an7dXmGYE4Y1ptqqKsK1nu26Ju0ty+maV2Rpvk+qnDZjKUIobUiesdAQE/jmCTmHmsskpFZsVYbtmXRcaoSGUPomunW2derQhDPFjtT1Q/eb8vnm990fq35oHVt11bU9m89c7DNI8Qs=\";","/**\r\n *\r\n * @see https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table\r\n */\r\nexport enum ClusterBreak {\r\n   Other = 0,\r\n   CR = 1 << 0,\r\n   LF = 1 << 1,\r\n   Control = 1 << 2,\r\n   Extend = 1 << 3,\r\n   ZWJ = 1 << 4,\r\n   Regional_Indicator = 1 << 5,\r\n   Prepend = 1 << 6,\r\n   SpacingMark = 1 << 7,\r\n   L = 1 << 8,\r\n   V = 1 << 9,\r\n   T = 1 << 10,\r\n   LV = 1 << 11,\r\n   LVT = 1 << 12,\r\n   Extended_Pictographic = 1 << 13,\r\n}\r\n","import { toUint8Array }    from '#runtime/data/format/base64';\r\n// import UnicodeTrie         from 'unicode-trie';\r\nimport { UnicodeTrie }     from '../../unicode-trie'\r\n\r\nimport { typeTrieB64 }     from './typeTrieB64';\r\nimport { extPictB64 }      from './extPictB64';\r\n\r\nimport { ClusterBreak } from '../types';\r\n\r\nconst typeTrie = new UnicodeTrie(toUint8Array(typeTrieB64));\r\nconst extPict = new UnicodeTrie(toUint8Array(extPictB64));\r\n\r\n// const typeTrie = { get: () => void 0 };\r\n// const extPict = { get: (str) => void 0 };\r\n\r\nfunction is(type, bit) {\r\n   return (type & bit) !== 0;\r\n}\r\n\r\nconst GB11State = {\r\n   Initial: 0,\r\n   ExtendOrZWJ: 1,\r\n   NotBoundary: 2,\r\n};\r\n\r\nfunction nextGraphemeClusterSize(ts, start)\r\n{\r\n   const L = ts.length;\r\n\r\n   let ri = 0;\r\n   let gb11State = GB11State.Initial;\r\n\r\n   // GB1: sot ÷ Any\r\n   for (let i = start; i + 1 < L; i++)\r\n   {\r\n      const curr = ts[i + 0];\r\n      const next = ts[i + 1];\r\n\r\n      // for GB12, GB13\r\n      if (!is(curr, ClusterBreak.Regional_Indicator)) { ri = 0; }\r\n\r\n      // for GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\r\n      switch (gb11State)\r\n      {\r\n         case GB11State.NotBoundary:\r\n         case GB11State.Initial:\r\n            if (is(curr, ClusterBreak.Extended_Pictographic))\r\n            {\r\n               gb11State = GB11State.ExtendOrZWJ;\r\n            }\r\n            else\r\n            {\r\n               gb11State = GB11State.Initial;\r\n            }\r\n            break;\r\n\r\n         case GB11State.ExtendOrZWJ:\r\n            if (is(curr, ClusterBreak.Extend))\r\n            {\r\n               gb11State = GB11State.ExtendOrZWJ;\r\n            }\r\n            else if (is(curr, ClusterBreak.ZWJ) && is(next, ClusterBreak.Extended_Pictographic))\r\n            {\r\n               gb11State = GB11State.NotBoundary;\r\n            }\r\n            else\r\n            {\r\n               gb11State = GB11State.Initial;\r\n            }\r\n            break;\r\n      }\r\n\r\n      // GB3: CR x LF\r\n      if (is(curr, ClusterBreak.CR) && is(next, ClusterBreak.LF)) { continue; }\r\n\r\n      // GB4: (Control | CR | LF) ÷\r\n      if (is(curr, ClusterBreak.Control | ClusterBreak.CR | ClusterBreak.LF)) { return i + 1 - start; }\r\n\r\n      // GB5: ÷ (Control | CR | LF)\r\n      if (is(next, ClusterBreak.Control | ClusterBreak.CR | ClusterBreak.LF)) { return i + 1 - start; }\r\n\r\n      // GB6: L x (L | V | LV | LVT)\r\n      if (is(curr, ClusterBreak.L) &&\r\n       is(next, ClusterBreak.L | ClusterBreak.V | ClusterBreak.LV | ClusterBreak.LVT))\r\n      {\r\n         continue;\r\n      }\r\n\r\n      // GB7: (LV | V) x (V | T)\r\n      if (is(curr, ClusterBreak.LV | ClusterBreak.V) && is(next, ClusterBreak.V | ClusterBreak.T))\r\n      {\r\n         continue;\r\n      }\r\n\r\n      // GB8: (LVT | T) x T\r\n      if (is(curr, ClusterBreak.LVT | ClusterBreak.T) && is(next, ClusterBreak.T)) { continue; }\r\n\r\n      // GB9: x (Extend | ZWJ)\r\n      if (is(next, ClusterBreak.Extend | ClusterBreak.ZWJ)) { continue; }\r\n\r\n      // GB9a: x SpacingMark\r\n      if (is(next, ClusterBreak.SpacingMark)) { continue; }\r\n\r\n      // GB9b: Prepend x\r\n      if (is(curr, ClusterBreak.Prepend)) { continue; }\r\n\r\n      // GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\r\n      if (gb11State === GB11State.NotBoundary) { continue; }\r\n\r\n      // GB12: sot (RI RI)* RI x RI\r\n      // GB13: [^RI] (RI RI)* RI x RI\r\n      if (is(curr, ClusterBreak.Regional_Indicator) && is(next, ClusterBreak.Regional_Indicator) && ri % 2 === 0)\r\n      {\r\n         ri++;\r\n         continue;\r\n      }\r\n\r\n      // GB999: Any ÷ Any\r\n      return i + 1 - start;\r\n   }\r\n\r\n   // GB2: Any ÷ eot\r\n   return L - start;\r\n}\r\n\r\n/**\r\n * @param {string}   str - String to split.\r\n *\r\n * @returns {string[]} The string split by Unicode grapheme clusters.\r\n */\r\nexport function graphemeSplit(str: string): string[]\r\n{\r\n   const graphemeClusters = [];\r\n\r\n   const map = [0];\r\n   const ts = [];\r\n\r\n   for (let i = 0; i < str.length;)\r\n   {\r\n      const code = str.codePointAt(i);\r\n      ts.push(typeTrie.get(code) | extPict.get(code));\r\n      i += code > 65535 ? 2 : 1;\r\n      map.push(i);\r\n   }\r\n\r\n   for (let offset = 0; offset < ts.length;)\r\n   {\r\n      const size = nextGraphemeClusterSize(ts, offset);\r\n      const start = map[offset];\r\n      const end = map[offset + size];\r\n      graphemeClusters.push(str.slice(start, end));\r\n      offset += size;\r\n   }\r\n\r\n   return graphemeClusters;\r\n}\r\n\r\n/**\r\n * @param {string}   str - String to split.\r\n *\r\n * @returns {IterableIterator<string>} An iterator returning grapheme clusters.\r\n * @yields {string}\r\n */\r\nexport function* graphemeIterator(str: string): IterableIterator<string>\r\n{\r\n   for (const grapheme of graphemeSplit(str))\r\n   {\r\n      yield grapheme;\r\n   }\r\n}\r\n\r\n// // An experimental attempt to create a generator / iterator.\r\n// export function* graphemeIteratorExp(str: string): Generator<string>\r\n// {\r\n//    let i = 0;\r\n//    let start = 0;\r\n//    const ts = [];\r\n//    let buffer = \"\";\r\n//    let lastUnicodeProperty = 0;\r\n//\r\n//    while (i < str.length)\r\n//    {\r\n//       const code = str.codePointAt(i);\r\n//       const unicodeProperty = typeTrie.get(code) | extPict.get(code);\r\n//       ts.push(unicodeProperty);\r\n//       i += code > 65535 ? 2 : 1;\r\n//\r\n//       const size = nextGraphemeClusterSize(ts, 0);\r\n//       if (size === ts.length)\r\n//       {\r\n//          const cluster = str.slice(start, i);\r\n//          if (buffer && !(unicodeProperty & ClusterBreak.ZWJ) && !(lastUnicodeProperty & ClusterBreak.ZWJ) &&\r\n//           !(unicodeProperty & ClusterBreak.Extend) && !(lastUnicodeProperty & ClusterBreak.Extend)) {\r\n//             yield buffer;\r\n//             buffer = \"\";\r\n//          }\r\n//          buffer += cluster;\r\n//          start = i;\r\n//          ts.length = 0;\r\n//          lastUnicodeProperty = unicodeProperty;\r\n//       }\r\n//    }\r\n//\r\n//    if (buffer) { yield buffer; }\r\n// }\r\n\r\n// // A trivial iterator that splits on every cluster / doesn't handle compound cases.\r\n// export function* graphemeIteratorTrivial(str: string): Generator<string>\r\n// {\r\n//    let i = 0;\r\n//    let start = 0;\r\n//    const ts = [];\r\n//\r\n//    while (i < str.length)\r\n//    {\r\n//       const code = str.codePointAt(i);\r\n//       ts.push(typeTrie.get(code) | extPict.get(code));\r\n//       i += code > 65535 ? 2 : 1;\r\n//\r\n//       const size = nextGraphemeClusterSize(ts, 0);\r\n//       if (size === ts.length)\r\n//       {\r\n//          yield str.slice(start, i);\r\n//          start = i;\r\n//          ts.length = 0;\r\n//       }\r\n//    }\r\n//\r\n//    if (ts.length > 0) { yield str.slice(start, i); }\r\n// }\r\n"],"names":[],"mappings":"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"}