{"version":3,"file":"index.js","sources":["../src/unicode-trie/Constants.ts","../src/unicode-trie/Swap32LE.ts","../src/unicode-trie/UnicodeTrie.ts","../src/grapheme/types.ts","../src/grapheme/split/UNICODE_GRAPHEME_B64_TYPE_TRIE.ts","../src/grapheme/split/UNICODE_GRAPHEME_B64_EXT_PICT_TRIE.ts","../src/grapheme/split/index.ts"],"sourcesContent":["/**\r\n * Shared constants between {@link UnicodeTrie} and {@link UnicodeTrieBuilder}.\r\n */\r\nexport class Const\r\n{\r\n   static readonly SHIFT_1: number = 6 + 5;\r\n\r\n   /**\r\n    * Shift size for getting the index-2 table offset.\r\n    */\r\n   static readonly SHIFT_2: number = 5;\r\n\r\n   /**\r\n    * Difference between the two shift sizes, for getting an index-1 offset from an index-2 offset. `6=11-5`.\r\n    */\r\n   static readonly SHIFT_1_2: number = this.SHIFT_1 - this.SHIFT_2;\r\n\r\n   /**\r\n    * Number of index-1 entries for the BMP. `32=0x20`.\r\n    * This part of the index-1 table is omitted from the serialized form.\r\n    */\r\n   static readonly OMITTED_BMP_INDEX_1_LENGTH: number = 0x10000 >> this.SHIFT_1;\r\n\r\n   /**\r\n    * Number of entries in an index-2 block. `64=0x40`.\r\n    */\r\n   static readonly INDEX_2_BLOCK_LENGTH: number = 1 << this.SHIFT_1_2;\r\n\r\n   /**\r\n    * Mask for getting the lower bits for the in-index-2-block offset.\r\n    */\r\n   static readonly INDEX_2_MASK: number = this.INDEX_2_BLOCK_LENGTH - 1;\r\n\r\n   /**\r\n    * Shift size for shifting left the index array values.\r\n    * Increases possible data size with 16-bit index values at the cost of \"compactability\".\r\n    * This requires data blocks to be aligned by #DATA_GRANULARITY.\r\n    */\r\n   static readonly INDEX_SHIFT: number = 2;\r\n\r\n   /**\r\n    * Number of entries in a data block. `32=0x20`.\r\n    */\r\n   static readonly DATA_BLOCK_LENGTH: number = 1 << this.SHIFT_2;\r\n\r\n   /**\r\n    * Mask for getting the lower bits for the in-data-block offset.\r\n    */\r\n   static readonly DATA_MASK: number = this.DATA_BLOCK_LENGTH - 1;\r\n\r\n   /**\r\n    * The part of the index-2 table for U+D800..U+DBFF stores values for lead surrogate code _units_ not code _points_.\r\n    * Values for lead surrogate code _points_ are indexed with this portion of the table.\r\n    * Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\r\n    */\r\n   static readonly LSCP_INDEX_2_OFFSET: number = 0x10000 >> this.SHIFT_2;\r\n   static readonly LSCP_INDEX_2_LENGTH: number = 0x400 >> this.SHIFT_2;\r\n\r\n   /**\r\n    * Count the lengths of both BMP pieces. `2080=0x820`.\r\n    */\r\n   static readonly INDEX_2_BMP_LENGTH: number = this.LSCP_INDEX_2_OFFSET + this.LSCP_INDEX_2_LENGTH;\r\n\r\n   /**\r\n    * The 2-byte UTF-8 version of the index-2 table follows at offset `2080=0x820`.\r\n    * Length `32=0x20` for lead bytes `C0..DF`, regardless of SHIFT_2.\r\n    */\r\n   static readonly UTF8_2B_INDEX_2_OFFSET: number = this.INDEX_2_BMP_LENGTH;\r\n   static readonly UTF8_2B_INDEX_2_LENGTH: number = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8\r\n\r\n   /**\r\n    * The index-1 table, only used for supplementary code points, at offset `2112=0x840`.\r\n    * Variable length, for code points up to highStart, where the last single-value range starts.\r\n    * Maximum length 512=0x200=0x100000>>SHIFT_1.\r\n    * (For 0x100000 supplementary code points U+10000..U+10ffff.)\r\n    *\r\n    * The part of the index-2 table for supplementary code points starts after this index-1 table.\r\n    *\r\n    * Both the index-1 table and the following part of the index-2 table are omitted completely if there is only BMP\r\n    * data.\r\n    */\r\n   static readonly INDEX_1_OFFSET: number = this.UTF8_2B_INDEX_2_OFFSET + this.UTF8_2B_INDEX_2_LENGTH;\r\n   static readonly MAX_INDEX_1_LENGTH = 0x100000 >> this.SHIFT_1;\r\n\r\n   /**\r\n    * The alignment size of a data block. Also, the granularity for compaction.\r\n    */\r\n   static readonly DATA_GRANULARITY: number = 1 << this.INDEX_SHIFT;\r\n}\r\n\r\n/**\r\n * Constants specific to {@link UnicodeTrieBuilder}.\r\n */\r\nexport class ConstB\r\n{\r\n   /**\r\n    * Number of code points per index-1 table entry. `2048=0x800`.\r\n    */\r\n   static readonly CP_PER_INDEX_1_ENTRY = 1 << Const.SHIFT_1;\r\n\r\n   /**\r\n    * The BMP part of the index-2 table is fixed and linear and starts at offset 0.\r\n    * Length=2048=0x800=0x10000>>SHIFT_2.\r\n    */\r\n   static readonly INDEX_2_OFFSET = 0;\r\n\r\n   /**\r\n    * The illegal-UTF-8 data block follows the ASCII block, at offset `128=0x80`.\r\n    * Used with linear access for single bytes 0..0xbf for simple error handling.\r\n    * Length `64=0x40`, not DATA_BLOCK_LENGTH.\r\n    */\r\n   static readonly BAD_UTF8_DATA_OFFSET = 0x80;\r\n\r\n   /**\r\n    * The start of non-linear-ASCII data blocks, at offset `192=0xc0`.\r\n    */\r\n   static readonly DATA_START_OFFSET = 0xc0;\r\n\r\n   /**\r\n    * The null data block.\r\n    * Length `64=0x40` even if DATA_BLOCK_LENGTH is smaller, to work with 6-bit trail bytes from 2-byte UTF-8.\r\n    */\r\n   static readonly DATA_NULL_OFFSET = this.DATA_START_OFFSET;\r\n\r\n   /**\r\n    * The start of allocated data blocks.\r\n    */\r\n   static readonly NEW_DATA_START_OFFSET = this.DATA_NULL_OFFSET + 0x40;\r\n\r\n   /**\r\n    * The start of data blocks for U+0800 and above.\r\n    * Below, compaction uses a block length of 64 for 2-byte UTF-8.\r\n    * From here on, compaction uses DATA_BLOCK_LENGTH.\r\n    * Data values for 0x780 code points beyond ASCII.\r\n    */\r\n   static readonly DATA_0800_OFFSET = this.NEW_DATA_START_OFFSET + 0x780;\r\n\r\n   /**\r\n    * Start with allocation of 16k data entries.\r\n    */\r\n   static readonly INITIAL_DATA_LENGTH = 1 << 14;\r\n\r\n   /**\r\n    * Grow about 8x each time.\r\n    */\r\n   static readonly MEDIUM_DATA_LENGTH = 1 << 17;\r\n\r\n   /**\r\n    * Maximum length of the runtime data array.\r\n    * Limited by 16-bit index values that are left-shifted by INDEX_SHIFT, and by uint16_t\r\n    * UTrie2Header.shiftedDataLength.\r\n    */\r\n   static readonly MAX_DATA_LENGTH_RUNTIME = 0xffff << Const.INDEX_SHIFT;\r\n\r\n   /**\r\n    *\r\n    */\r\n   static readonly INDEX_1_LENGTH = 0x110000 >> Const.SHIFT_1;\r\n\r\n   /**\r\n    * Maximum length of the build-time data array.\r\n    * One entry per `0x110000` code points, plus the illegal-UTF-8 block and the null block, plus values for the `0x400`\r\n    * surrogate code units.\r\n    */\r\n   static readonly MAX_DATA_LENGTH_BUILDTIME = 0x110000 + 0x40 + 0x40 + 0x400;\r\n\r\n   /**\r\n    * At build time, leave a gap in the index-2 table, at least as long as the maximum lengths of the 2-byte UTF-8\r\n    * index-2 table and the supplementary index-1 table.\r\n    * Round up to INDEX_2_BLOCK_LENGTH for proper compacting.\r\n    */\r\n   static readonly INDEX_GAP_OFFSET = Const.INDEX_2_BMP_LENGTH;\r\n   static readonly INDEX_GAP_LENGTH = ((Const.UTF8_2B_INDEX_2_LENGTH + Const.MAX_INDEX_1_LENGTH) +\r\n    Const.INDEX_2_MASK) & ~Const.INDEX_2_MASK;\r\n\r\n   /**\r\n    * Maximum length of the build-time index-2 array.\r\n    * Maximum number of Unicode code points (0x110000) shifted right by SHIFT_2,\r\n    * plus the part of the index-2 table for lead surrogate code points,\r\n    * plus the build-time index gap,\r\n    * plus the null index-2 block.\r\n    */\r\n   static readonly MAX_INDEX_2_LENGTH = (0x110000 >> Const.SHIFT_2) + Const.LSCP_INDEX_2_LENGTH +\r\n    this.INDEX_GAP_LENGTH + Const.INDEX_2_BLOCK_LENGTH;\r\n\r\n   /**\r\n    * The null index-2 block, following the gap in the index-2 table.\r\n    */\r\n   static readonly INDEX_2_NULL_OFFSET = this.INDEX_GAP_OFFSET + this.INDEX_GAP_LENGTH;\r\n\r\n   /**\r\n    * The start of allocated index-2 blocks.\r\n    */\r\n   static readonly INDEX_2_START_OFFSET = this.INDEX_2_NULL_OFFSET + Const.INDEX_2_BLOCK_LENGTH;\r\n\r\n   /**\r\n    * Maximum length of the runtime index array.\r\n    * Limited by its own 16-bit index values, and by uint16_t UTrie2Header.indexLength.\r\n    * The actual maximum length is lower, (0x110000>>SHIFT_2)+UTF8_2B_INDEX_2_LENGTH+MAX_INDEX_1_LENGTH.\r\n    */\r\n   static readonly MAX_INDEX_LENGTH = 0xffff;\r\n}\r\n","/**\r\n * Provides a helper utility to potentially swap a typed array to little endian.\r\n */\r\nexport class Swap32LE\r\n{\r\n   /**\r\n    * Swaps the given typed array as necessary to little endian as necessary. Uint8Array is assumed to have 32-bit data\r\n    * internally.\r\n    *\r\n    * @param {Uint8Array | Uint32Array} array - Array to potentially swap.\r\n    *\r\n    * @returns {Uint8Array | Uint32Array} Passed in array.\r\n    */\r\n   static swap(array: Uint8Array | Uint32Array)\r\n   {\r\n      /* c8 ignore next */\r\n      if (this.#isBigEndian) { this.#swap32(array); }\r\n\r\n      return array;\r\n   }\r\n\r\n   static #isBigEndian: boolean = (new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x12);\r\n\r\n   /* c8 ignore next 6 */\r\n   static #swap(b, n, m)\r\n   {\r\n      const i = b[n];\r\n      b[n] = b[m];\r\n      b[m] = i;\r\n   }\r\n\r\n   /* c8 ignore next 10 */\r\n   static #swap32(array: Uint8Array | Uint32Array)\r\n   {\r\n      const len = array.length;\r\n\r\n      for (let i = 0; i < len; i += 4)\r\n      {\r\n         this.#swap(array, i, i + 3);\r\n         this.#swap(array, i + 1, i + 2);\r\n      }\r\n   }\r\n}\r\n","import { inflateSync }     from '#runtime/data/compress';\r\n\r\nimport { Const }           from './Constants';\r\nimport { Swap32LE }        from './Swap32LE';\r\n\r\nimport type {\r\n   UnicodeTrieParsedData,\r\n   UnicodeTrieRawData }    from './types';\r\n\r\n/**\r\n * Provides lookup in a pre-built UnicodeTrie data structure. Use {@link UnicodeTrieBuilder} for building /\r\n * serialization of a pre-built data structure.\r\n */\r\nexport class UnicodeTrie\r\n{\r\n   readonly #data: Uint32Array;\r\n\r\n   readonly #errorValue: number;\r\n\r\n   readonly #highStart: number;\r\n\r\n   /**\r\n    * @param {UnicodeTrieParsedData | UnicodeTrieRawData} data -\r\n    */\r\n   constructor(data: UnicodeTrieParsedData | UnicodeTrieRawData)\r\n   {\r\n      if (data instanceof Uint8Array)\r\n      {\r\n         // Is Node Buffer read binary format.\r\n         if (typeof data.readUInt32LE === 'function')\r\n         {\r\n            this.#highStart = data.readUInt32LE(0);\r\n            this.#errorValue = data.readUInt32LE(4);\r\n            data = data.slice(12);\r\n         }\r\n         else\r\n         {\r\n            const view = new DataView(data.buffer);\r\n            this.#highStart = view.getUint32(0, true);\r\n            this.#errorValue = view.getUint32(4, true);\r\n            data = data.subarray(12);\r\n         }\r\n\r\n         // Double inflate the actual trie data.\r\n         data = inflateSync(data);\r\n\r\n         // Swap bytes from little-endian.\r\n         Swap32LE.swap(data);\r\n\r\n         this.#data = new Uint32Array(data.buffer);\r\n      }\r\n      else\r\n      {\r\n         // pre-parsed data\r\n         ({ data: this.#data, highStart: this.#highStart, errorValue: this.#errorValue } = data);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @returns {Uint32Array} The data array.\r\n    */\r\n   get data(): Uint32Array { return this.#data; }\r\n\r\n   /**\r\n    * @returns {number} The error value.\r\n    */\r\n   get errorValue(): number { return this.#errorValue; }\r\n\r\n   /**\r\n    * @returns {number} The high start.\r\n    */\r\n   get highStart(): number { return this.#highStart; }\r\n\r\n   /**\r\n    * @param {number}   codePoint -\r\n    */\r\n   get(codePoint: number)\r\n   {\r\n      if ((codePoint < 0) || (codePoint > 0x10ffff)) { return this.#errorValue; }\r\n\r\n      let index;\r\n\r\n      if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff)))\r\n      {\r\n         // Ordinary BMP code point, excluding leading surrogates.\r\n         // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\r\n         // data is stored in the index array itself.\r\n         index = (this.#data[codePoint >> Const.SHIFT_2] << Const.INDEX_SHIFT) + (codePoint & Const.DATA_MASK);\r\n\r\n         return this.#data[index];\r\n      }\r\n\r\n      if (codePoint <= 0xffff)\r\n      {\r\n         // Lead Surrogate Code Point.  A Separate index section is stored for\r\n         // lead surrogate code units and code points.\r\n         //   The main index has the code unit data.\r\n         //   For this function, we need the code point data.\r\n         index = (this.#data[Const.LSCP_INDEX_2_OFFSET +\r\n          ((codePoint - 0xd800) >> Const.SHIFT_2)] << Const.INDEX_SHIFT) +\r\n           (codePoint & Const.DATA_MASK);\r\n\r\n         return this.#data[index];\r\n      }\r\n\r\n      if (codePoint < this.#highStart)\r\n      {\r\n         // Supplemental code point, use two-level lookup.\r\n         index = this.#data[(Const.INDEX_1_OFFSET - Const.OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> Const.SHIFT_1)];\r\n\r\n         index = this.#data[index + ((codePoint >> Const.SHIFT_2) & Const.INDEX_2_MASK)];\r\n\r\n         index = (index << Const.INDEX_SHIFT) + (codePoint & Const.DATA_MASK);\r\n\r\n         return this.#data[index];\r\n      }\r\n\r\n      return this.#data[this.#data.length - Const.DATA_GRANULARITY];\r\n   }\r\n}\r\n","/**\r\n * Defines useful constants from Unicode Annex #29 - Unicode Text Segmentation.\r\n *\r\n * @see https://www.unicode.org/reports/tr29\r\n */\r\nexport namespace UAX29 {\r\n   /**\r\n    * @see https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table\r\n    */\r\n   export enum ClusterBreak {\r\n      Other = 0,\r\n      CR = 1 << 0,\r\n      LF = 1 << 1,\r\n      Control = 1 << 2,\r\n      Extend = 1 << 3,\r\n      ZWJ = 1 << 4,\r\n      Regional_Indicator = 1 << 5,\r\n      Prepend = 1 << 6,\r\n      SpacingMark = 1 << 7,\r\n      L = 1 << 8,\r\n      V = 1 << 9,\r\n      T = 1 << 10,\r\n      LV = 1 << 11,\r\n      LVT = 1 << 12,\r\n      Extended_Pictographic = 1 << 13,\r\n   }\r\n}\r\n","export const UNICODE_GRAPHEME_B64_TYPE_TRIE = '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';","export const UNICODE_GRAPHEME_B64_EXT_PICT_TRIE = 'AAACAAAAAACAOAAA7ZktSAVBEMefGtRiMVrEJlhsxgOLGESMBrkkKrwiCA+L2ASbxSQYjGK0aLLZbEbFaLTZ/C/eg+XYu7c7+/Xg/gM/dm8/ZmZndvfCrk32egXYANtgD+yDYXsXSkK6zBE4buk/1ern4MJB9yW40r6H9Wtw0zLvsKXvDtyDB/AInjReat+v4A28gw/wBb4d4/PjEdvfqpyYyp/nJvoBdU2P8ToJIYQQQgghhBBCCCGEEEJIfMrZfwbgcyY9RS8PJWzfAv2t0sQc3tPUW6mK1TzqC2AJqL5llKvqvQ0UVZsL65ZznsHmiLFbyg9Du57rnWqMYqXSt1u1lVV5gLKv2TpBfQDOBOur2zch0RkKFVcKpfOyaNmWQiR2U/ga00Zs3SYkOlKKrc2UfoWy1ZQTmzylyqHt2Fz3hElMsWuLq0sepHNiYSuh7UniNWqfSPua1uoi9bU19ducRemZlJ5pqbja8/Er19zQeyRGfmLpTBHHNtu+9kLG2/f+DJUryR0aes0p/jchJNV/0Vdcc2oalyufvrEcBx8kEtt+aP9D7nfJ/FT5ybVfUp8nSV/E8/QH';","import { toUint8Array }    from '#runtime/data/format/base64';\r\n\r\nimport { UnicodeTrie }     from '../../unicode-trie'\r\n\r\nimport { UAX29 }           from '../types';\r\n\r\nimport { UNICODE_GRAPHEME_B64_TYPE_TRIE }       from './UNICODE_GRAPHEME_B64_TYPE_TRIE';\r\nimport { UNICODE_GRAPHEME_B64_EXT_PICT_TRIE }   from './UNICODE_GRAPHEME_B64_EXT_PICT_TRIE';\r\n\r\n/**\r\n * Provides internal support for lazy loading of Unicode trie data and essential lookups.\r\n */\r\nclass GraphemeSplitHelper\r\n{\r\n   static #typeTrie: UnicodeTrie;\r\n   static #extPict: UnicodeTrie;\r\n\r\n   static #isLoaded: boolean = false;\r\n\r\n   static readonly GB11State = {\r\n      Initial: 0,\r\n      ExtendOrZWJ: 1,\r\n      NotBoundary: 2,\r\n   };\r\n\r\n   static checkLoadData()\r\n   {\r\n      if (!this.#isLoaded)\r\n      {\r\n         this.#typeTrie = new UnicodeTrie(toUint8Array(UNICODE_GRAPHEME_B64_TYPE_TRIE));\r\n         this.#extPict = new UnicodeTrie(toUint8Array(UNICODE_GRAPHEME_B64_EXT_PICT_TRIE));\r\n\r\n         this.#isLoaded = true;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns the `OR` result of lookups from `typeTrie` and `extPict`.\r\n    *\r\n    * @param {number}   codePoint - A Unicode code point to lookup.\r\n    *\r\n    * @returns {number} Code point meta-data.\r\n    */\r\n   static get(codePoint: number): number\r\n   {\r\n      return this.#typeTrie.get(codePoint) | this.#extPict.get(codePoint);\r\n   }\r\n\r\n   /**\r\n    * Helper function to test stored code point types.\r\n    *\r\n    * @param {number}   type - Code point type.\r\n    *\r\n    * @param {number}   bit - ClusterBreak to test against.\r\n    */\r\n   static is(type: number, bit: number)\r\n   {\r\n      return (type & bit) !== 0;\r\n   }\r\n\r\n   /**\r\n    * Analyzes the next grapheme cluster size from a pre-parsed string of code point types.\r\n    *\r\n    * @param {number[]}   ts - Code point types.\r\n    *\r\n    * @param {number}   start -\r\n    */\r\n   static nextGraphemeClusterSize(ts: number[], start: number)\r\n   {\r\n      const CB = UAX29.ClusterBreak;\r\n\r\n      const L = ts.length;\r\n\r\n      let ri = 0;\r\n      let gb11State = this.GB11State.Initial;\r\n\r\n      // GB1: sot ÷ Any\r\n      for (let i = start; i + 1 < L; i++)\r\n      {\r\n         const curr = ts[i];\r\n         const next = ts[i + 1];\r\n\r\n         // for GB12, GB13\r\n         if (!this.is(curr, CB.Regional_Indicator)) { ri = 0; }\r\n\r\n         // for GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\r\n         switch (gb11State)\r\n         {\r\n            case this.GB11State.NotBoundary:\r\n            case this.GB11State.Initial:\r\n               if (this.is(curr, CB.Extended_Pictographic))\r\n               {\r\n                  gb11State = this.GB11State.ExtendOrZWJ;\r\n               }\r\n               else\r\n               {\r\n                  gb11State = this.GB11State.Initial;\r\n               }\r\n               break;\r\n\r\n            case this.GB11State.ExtendOrZWJ:\r\n               if (this.is(curr, CB.Extend))\r\n               {\r\n                  gb11State = this.GB11State.ExtendOrZWJ;\r\n               }\r\n               else if (this.is(curr, CB.ZWJ) && this.is(next, CB.Extended_Pictographic))\r\n               {\r\n                  gb11State = this.GB11State.NotBoundary;\r\n               }\r\n               else\r\n               {\r\n                  gb11State = this.GB11State.Initial;\r\n               }\r\n               break;\r\n         }\r\n\r\n         // GB3: CR x LF\r\n         if (this.is(curr, CB.CR) && this.is(next, CB.LF)) { continue; }\r\n\r\n         // GB4: (Control | CR | LF) ÷\r\n         if (this.is(curr, CB.Control | CB.CR | CB.LF)) { return i + 1 - start; }\r\n\r\n         // GB5: ÷ (Control | CR | LF)\r\n         if (this.is(next, CB.Control | CB.CR | CB.LF)) { return i + 1 - start; }\r\n\r\n         // GB6: L x (L | V | LV | LVT)\r\n         if (this.is(curr, CB.L) && this.is(next, CB.L | CB.V | CB.LV | CB.LVT)) { continue; }\r\n\r\n         // GB7: (LV | V) x (V | T)\r\n         if (this.is(curr, CB.LV | CB.V) && this.is(next, CB.V | CB.T)) { continue; }\r\n\r\n         // GB8: (LVT | T) x T\r\n         if (this.is(curr, CB.LVT | CB.T) && this.is(next, CB.T)) { continue; }\r\n\r\n         // GB9: x (Extend | ZWJ)\r\n         if (this.is(next, CB.Extend | CB.ZWJ)) { continue; }\r\n\r\n         // GB9a: x SpacingMark\r\n         if (this.is(next, CB.SpacingMark)) { continue; }\r\n\r\n         // GB9b: Prepend x\r\n         if (this.is(curr, CB.Prepend)) { continue; }\r\n\r\n         // GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\r\n         if (gb11State === this.GB11State.NotBoundary) { continue; }\r\n\r\n         // GB12: sot (RI RI)* RI x RI\r\n         // GB13: [^RI] (RI RI)* RI x RI\r\n         if (this.is(curr, CB.Regional_Indicator) && this.is(next, CB.Regional_Indicator) && ri % 2 === 0)\r\n         {\r\n            ri++;\r\n            continue;\r\n         }\r\n\r\n         // GB999: Any ÷ Any\r\n         return i + 1 - start;\r\n      }\r\n\r\n      // GB2: Any ÷ eot\r\n      return L - start;\r\n   }\r\n}\r\n\r\n/**\r\n * Splits the given string into an array of Unicode grapheme clusters.\r\n *\r\n * @param {string}   str - String to split.\r\n *\r\n * @returns {string[]} The string split by Unicode grapheme clusters.\r\n */\r\nexport function graphemeSplit(str: string): string[]\r\n{\r\n   GraphemeSplitHelper.checkLoadData();\r\n\r\n   const graphemeClusters = [];\r\n\r\n   const map = [0];\r\n   const ts = [];\r\n\r\n   for (let i = 0; i < str.length;)\r\n   {\r\n      const code = str.codePointAt(i);\r\n      ts.push(GraphemeSplitHelper.get(code));\r\n      i += code > 65535 ? 2 : 1;\r\n      map.push(i);\r\n   }\r\n\r\n   for (let offset = 0; offset < ts.length;)\r\n   {\r\n      const size = GraphemeSplitHelper.nextGraphemeClusterSize(ts, offset);\r\n      const start = map[offset];\r\n      const end = map[offset + size];\r\n      graphemeClusters.push(str.slice(start, end));\r\n      offset += size;\r\n   }\r\n\r\n   return graphemeClusters;\r\n}\r\n\r\n/**\r\n * Provides an iterator for tokenizing a string by grapheme clusters.\r\n *\r\n * Note: This is a naive implementation that fully parses the string then returns the iterator over parsed clusters.\r\n * A future implementation will implement an immediate mode parser returning cluster by cluster as the string is\r\n * parsed.\r\n *\r\n * @param {string}   str - String to split.\r\n *\r\n * @returns {IterableIterator<string>} An iterator returning grapheme clusters.\r\n * @yields {string}\r\n */\r\nexport function* graphemeIterator(str: string): IterableIterator<string>\r\n{\r\n   for (const grapheme of graphemeSplit(str)) { yield grapheme; }\r\n}\r\n"],"names":[],"mappings":"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"}